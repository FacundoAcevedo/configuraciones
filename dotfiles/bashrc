# /etc/bash/bashrc
umask 027
#
# This file is sourced by all *interactive* bash shells on startup,
# including some apparently interactive shells such as scp and rcp
# that can't tolerate any output.  So make sure this doesn't display
# anything or bad things will happen !


# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.

if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

# Enable history appending instead of overwriting.  #139609
shopt -s histappend
export HISTCONTROL=ignoredups

# Change the window title of X terminals
#case ${TERM} in
#	xterm*|rxvt*|Eterm|aterm|kterm|gnome*|interix)
#		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
#		;;
#	screen)
#		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
#		;;
#esac

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		else
			eval `dircolors -b`
		fi
	fi


# Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensity
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensity
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[0;105m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White

is_git() {
  git rev-parse --abbrev-ref HEAD 2>/dev/null | sed -e 's/^/Â± /' -e 's/$/ /'
}

# ~ratio between things to do and days left in year~
# ratio between things to do and days passed
rel_f() {
  if [ /tmp/rel_f -ot ~/projects/f/list ]; then
#    let left=366-$(date +%j)
    spark 0 $(date +%j | sed 's/^0\+//') $(f | wc -l) | sed "s/^..//" | tee /tmp/rel_f
  else
    cat /tmp/rel_f
  fi
}

is_writable() {
  test -w . || echo "x "
}

i_am_root() {
  #chequeamos si somos root
  if [ ${UID} -eq 0 ]; then
      echo "[!] "
  fi
}


PS1="\[${BRed}\]\$(i_am_root)\$(is_writable)\[${BYellow}\]\$(is_git)\[${BBlue}\]\w\[${Color_Off}\] "

# Colores!
	if [ "$TERM" = "linux" ]; then
		echo -en "\e]P0000000" #black
		echo -en "\e]P8555753" #darkgrey
		echo -en "\e]P1a40000" #darkred
		echo -en "\e]P9ef2929" #red
		echo -en "\e]P24e9a06" #darkgreen
		echo -en "\e]PA73d216" #green
		echo -en "\e]P38f5902" #brown
		echo -en "\e]PBedd400" #yellow
		echo -en "\e]P4204a87" #darkblue
		echo -en "\e]PC3465a4" #blue
		echo -en "\e]P55c3566" #darkmagenta
		echo -en "\e]PD75507b" #magenta
		echo -en "\e]P6ce5c00" #darkcyan
		echo -en "\e]PEf57900" #cyan
		echo -en "\e]P7babdb6" #lightgrey
		echo -en "\e]PFeeeeec" #white
		clear #for background artifacting
	fi

	export LESS_TERMCAP_mb=$'\E[01;31m'
	export LESS_TERMCAP_md=$'\E[01;31m'
	export LESS_TERMCAP_me=$'\E[0m'
	export LESS_TERMCAP_se=$'\E[0m'
	export LESS_TERMCAP_so=$'\E[01;44;33m'
	export LESS_TERMCAP_ue=$'\E[0m'
	export LESS_TERMCAP_us=$'\E[01;32m'

# Try to keep environment pollution down, EPA loves us.
unset safe_term match_lhs

[ -f ~/.bashrc.mine ] && source ~/.bashrc.mine
[ -f ~/.bash_aliases ] && source ~/.bash_aliases

export EDITOR=vim
# Formato para par(1)
export PARINIT="rTbgqR B=.,?_A_a Q=_s>|"

wlinks() {
  wget -nv -O - $@ |
  /usr/bin/grep -o "\(https\?://\|magnet:\)[^\"']\+" |
  sed "s/<[^>]\+>//g" |
  sort -c
}

links() {
  grep -o "https\?://[^\"']\+"
}

clip() {
    while [ 1 ]; do
        l="$(xsel -ob)"

        if [ "$l" = "stop" ]; then break; fi

        if [ "$l" != "$o" ]; then
            echo "$l"

            o="$l"
        fi

        sleep 1s
    done
}

to_webm_hd() {
  ffmpeg -i "$1" \
         -s 960x540 \
         -vcodec libvpx \
         -g 120 \
         -lag-in-frames 16 \
         -deadline good \
         -cpu-used 0 \
         -vprofile 0 \
         -qmax 51 \
         -qmin 11 \
         -slices 4 \
         -b:v 2M \
         -acodec libvorbis \
         -ab 112k \
         -ar 44100 \
         -f webm \
         -sn \
         "${1%.*}".webm
}

# https://develop.participatoryculture.org/index.php/ConversionMatrix
to_webm_sd() {
  ffmpeg -i "$1"\
    -s hd480 -vcodec libvpx -g 120 -lag-in-frames 16 -deadline good \
    -cpu-used 0 -vprofile 0 -qmax 63 -qmin 0 -b:v 768k \
    -acodec libvorbis -ab 112k -ar 44100 \
    -f webm "${1%.*}".webm
}

to_webm() {
  ffmpeg -i "$1"\
    -vcodec libvpx -g 120 -lag-in-frames 16 -deadline good \
    -cpu-used 0 -vprofile 0 -qmax 63 -qmin 0 -b:v 768k \
    -acodec libvorbis -ab 112k -ar 44100 \
    -f webm "${1%.*}".webm
}

export LESS="-niSFXR"
export PAGER="less"



# buscar en el historial comandos que empiecen con lo escrito
bind '"\e[A":history-search-backward'
bind '"\e[B":history-search-forward'

function clima { curl wttr.in/BuenosAires,argentina; }

merge_pdf() {
    output="${1}"
    shift

    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="${output}" "${@}"
}
